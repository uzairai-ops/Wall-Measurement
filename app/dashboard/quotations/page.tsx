"use client";

import { useState, useEffect } from "react";
import { FileText, Download, Eye, Trash2, Calendar, Clock } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { SidebarTrigger } from "@/components/ui/sidebar";
import { Separator } from "@/components/ui/separator";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";

interface Analysis {
  fileName: string;
  result: string;
  timestamp: string;
  sessionId: string;
}

const QuotationsPage = () => {
  const [analyses, setAnalyses] = useState<Analysis[]>([]);
  const [selectedAnalysis, setSelectedAnalysis] = useState<Analysis | null>(
    null
  );

  useEffect(() => {
    // Load analyses from localStorage
    const savedAnalyses = JSON.parse(localStorage.getItem("analyses") || "[]");
    setAnalyses(savedAnalyses);
  }, []);

  const deleteAnalysis = (index: number) => {
    const updatedAnalyses = analyses.filter((_, i) => i !== index);
    setAnalyses(updatedAnalyses);
    localStorage.setItem("analyses", JSON.stringify(updatedAnalyses));
  };

  const exportAnalysis = (analysis: Analysis) => {
    const content = `
CONSTRUCTION MEASUREMENT ANALYSIS
================================

File: ${analysis.fileName}
Date: ${new Date(analysis.timestamp).toLocaleString()}
Session ID: ${analysis.sessionId}

MEASUREMENT RESULTS:
${analysis.result}

Generated by Construction Measurement Analyzer
    `;

    const blob = new Blob([content], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = `analysis-${analysis.fileName}-${Date.now()}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const formatDate = (timestamp: string) => {
    return new Date(timestamp).toLocaleDateString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  return (
    <div className="flex-1 flex flex-col h-full">
      {/* Header */}
      <header className="flex h-16 shrink-0 items-center gap-2 border-b bg-white px-4">
        <SidebarTrigger className="-ml-1" />
        <Separator orientation="vertical" className="mr-2 h-4" />
        <div className="flex flex-col">
          <h1 className="text-lg font-semibold">Analysis History</h1>
          <p className="text-sm text-muted-foreground hidden sm:block">
            View and manage your measurement analysis results
          </p>
        </div>
      </header>

      {/* Main Content */}
      <div className="flex-1 overflow-auto bg-gradient-to-br from-slate-50 to-blue-50">
        <div className="container mx-auto px-4 py-6 max-w-7xl">
          {/* Stats Cards */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center gap-4">
                  <div className="p-3 bg-blue-100 rounded-lg flex-shrink-0">
                    <FileText className="w-6 h-6 text-blue-600" />
                  </div>
                  <div className="min-w-0 flex-1">
                    <p className="text-sm text-gray-600">Total Analyses</p>
                    <p className="text-2xl font-bold text-gray-900">
                      {analyses.length}
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-6">
                <div className="flex items-center gap-4">
                  <div className="p-3 bg-green-100 rounded-lg flex-shrink-0">
                    <Calendar className="w-6 h-6 text-green-600" />
                  </div>
                  <div className="min-w-0 flex-1">
                    <p className="text-sm text-gray-600">This Month</p>
                    <p className="text-2xl font-bold text-gray-900">
                      {
                        analyses.filter(
                          (a) =>
                            new Date(a.timestamp).getMonth() ===
                            new Date().getMonth()
                        ).length
                      }
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="sm:col-span-2 lg:col-span-1">
              <CardContent className="p-6">
                <div className="flex items-center gap-4">
                  <div className="p-3 bg-purple-100 rounded-lg flex-shrink-0">
                    <Clock className="w-6 h-6 text-purple-600" />
                  </div>
                  <div className="min-w-0 flex-1">
                    <p className="text-sm text-gray-600">Latest Analysis</p>
                    <p className="text-sm font-medium text-gray-900 truncate">
                      {analyses.length > 0
                        ? formatDate(analyses[analyses.length - 1].timestamp)
                        : "No analyses yet"}
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Analysis List */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileText className="w-5 h-5" />
                Analysis Results
              </CardTitle>
            </CardHeader>
            <CardContent>
              {analyses.length === 0 ? (
                <div className="text-center py-12">
                  <FileText className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    No analyses yet
                  </h3>
                  <p className="text-gray-500 mb-4 max-w-md mx-auto">
                    Upload and analyze your first construction video or image to
                    see results here.
                  </p>
                  <Button asChild>
                    <a href="/dashboard/upload">Start Analysis</a>
                  </Button>
                </div>
              ) : (
                <div className="space-y-4">
                  {analyses.map((analysis, index) => (
                    <div
                      key={index}
                      className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors"
                    >
                      <div className="flex flex-col lg:flex-row lg:items-center gap-4">
                        <div className="flex-1 min-w-0">
                          <h3 className="font-medium text-gray-900 mb-1 truncate">
                            {analysis.fileName}
                          </h3>
                          <p className="text-sm text-gray-500 mb-2">
                            Analyzed on {formatDate(analysis.timestamp)}
                          </p>
                          <p className="text-sm text-gray-600 line-clamp-2 break-words">
                            {analysis.result.substring(0, 150)}...
                          </p>
                        </div>
                        <div className="flex flex-wrap gap-2 lg:flex-shrink-0">
                          <Dialog>
                            <DialogTrigger asChild>
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => setSelectedAnalysis(analysis)}
                              >
                                <Eye className="w-4 h-4 mr-1" />
                                View
                              </Button>
                            </DialogTrigger>
                            <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
                              <DialogHeader>
                                <DialogTitle className="truncate pr-8">
                                  {selectedAnalysis?.fileName}
                                </DialogTitle>
                              </DialogHeader>
                              <div className="mt-4 space-y-4">
                                <div className="bg-gray-50 rounded-lg p-4">
                                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-2 text-sm text-gray-600">
                                    <p>
                                      <strong>Analyzed:</strong>{" "}
                                      {selectedAnalysis &&
                                        formatDate(selectedAnalysis.timestamp)}
                                    </p>
                                    <p className="break-all">
                                      <strong>Session ID:</strong>{" "}
                                      {selectedAnalysis?.sessionId}
                                    </p>
                                  </div>
                                </div>
                                <div className="bg-white border rounded-lg p-4">
                                  <h4 className="font-medium text-gray-900 mb-3">
                                    Measurement Results:
                                  </h4>
                                  <pre className="whitespace-pre-wrap text-sm text-gray-700 leading-relaxed overflow-x-auto">
                                    {selectedAnalysis?.result}
                                  </pre>
                                </div>
                              </div>
                            </DialogContent>
                          </Dialog>

                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => exportAnalysis(analysis)}
                          >
                            <Download className="w-4 h-4 mr-1" />
                            Export
                          </Button>

                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => deleteAnalysis(index)}
                            className="text-red-600 hover:text-red-700 hover:bg-red-50"
                          >
                            <Trash2 className="w-4 h-4" />
                          </Button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default QuotationsPage;
